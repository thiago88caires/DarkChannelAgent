// =================================================================
// Dark Channel Agent - Jenkinsfile com Git Clone
// Pipeline que clona o repositório automaticamente
// =================================================================

pipeline {
    agent any
    
    environment {
        DOCKER_BUILDKIT = '1'
        COMPOSE_DOCKER_CLI_BUILD = '1'
        APP_NAME = 'dark-channel-agent'
        APP_ENV = 'production'
        // Configure a URL do seu repositório aqui
        GIT_REPO_URL = 'https://github.com/thiago88caires/DarkChannelAgent_APP.git'
        GIT_BRANCH = 'main'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo "📥 Clonando repositório..."
                    
                    sh '''
                        echo "=== Clonando Repositório ==="
                        echo "URL: ${GIT_REPO_URL}"
                        echo "Branch: ${GIT_BRANCH}"
                        echo "Workspace: $(pwd)"
                        echo ""
                        
                        # Limpar workspace
                        rm -rf * .* 2>/dev/null || true
                        
                        # Clonar repositório
                        if command -v git >/dev/null 2>&1; then
                            git clone -b ${GIT_BRANCH} ${GIT_REPO_URL} .
                            echo "✅ Repositório clonado com sucesso"
                        else
                            echo "❌ Git não está instalado!"
                            echo "Tentando download direto..."
                            
                            # Tentar download via curl/wget como fallback
                            if command -v curl >/dev/null 2>&1; then
                                curl -L "${GIT_REPO_URL}/archive/${GIT_BRANCH}.zip" -o repo.zip
                                unzip repo.zip
                                mv DarkChannelAgent_APP-${GIT_BRANCH}/* .
                                rm -rf DarkChannelAgent_APP-${GIT_BRANCH} repo.zip
                                echo "✅ Código baixado via curl"
                            else
                                echo "❌ Curl também não disponível!"
                                exit 1
                            fi
                        fi
                        
                        echo ""
                        echo "Arquivos baixados:"
                        ls -la
                        echo "================================"
                    '''
                }
            }
        }
        
        stage('Environment Check') {
            steps {
                script {
                    echo "🔍 Verificando ambiente..."
                    
                    sh '''
                        echo "Verificando arquivos necessários..."
                        
                        if [ ! -f "docker-compose.yml" ]; then
                            echo "❌ docker-compose.yml não encontrado!"
                            exit 1
                        fi
                        
                        if [ ! -f "build.sh" ]; then
                            echo "❌ build.sh não encontrado!"
                            exit 1
                        fi
                        
                        if [ ! -f "backend/package.json" ]; then
                            echo "❌ backend/package.json não encontrado!"
                            exit 1
                        fi
                        
                        if [ ! -f "frontend/package.json" ]; then
                            echo "❌ frontend/package.json não encontrado!"
                            exit 1
                        fi
                        
                        if [ ! -f ".env" ]; then
                            echo "⚠️  Arquivo .env não encontrado!"
                            echo "Criando arquivo .env básico..."
                            # Criar um .env básico para o build
                            cat > .env << 'EOF'
# Configurações básicas para build
POSTGRES_PASSWORD=postgres123
JWT_SECRET=your-super-secret-jwt-token-here-$(date +%s)
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
SUPABASE_PUBLIC_URL=http://localhost:54321
SUPABASE_INTERNAL_URL=http://supabase-gateway
SITE_URL=http://localhost:3000
API_EXTERNAL_URL=http://localhost:54321
PGRST_DB_SCHEMAS=public
DISABLE_SIGNUP=false
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=true
ENABLE_PHONE_SIGNUP=false
ENABLE_PHONE_AUTOCONFIRM=false
JWT_EXPIRY=3600
SMTP_ADMIN_EMAIL=admin@example.com
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
SMTP_SENDER_NAME=DarkChannelAgent
N8N_BASE_URL=http://n8n:5678
N8N_WEBHOOK_SCREENPLAY_URL=http://n8n:5678/webhook/screenplay
N8N_WEBHOOK_VIDEO_URL=http://n8n:5678/webhook/video
N8N_CALLBACK_SECRET=your-callback-secret-$(date +%s)
PAYMENT_PROVIDER=stripe
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
CREDITS_PRICE_CENTS=3000
ALLOW_ANON=true
ALLOW_ANON_ADMIN=false
ADDITIONAL_REDIRECT_URLS=http://localhost:3000
EOF
                            echo "✅ Arquivo .env criado"
                        fi
                        
                        echo "✅ Verificação de arquivos concluída"
                    '''
                    
                    sh '''
                        echo "Verificando Docker..."
                        docker --version
                        if command -v docker-compose >/dev/null 2>&1; then
                            docker-compose --version
                        elif docker compose version >/dev/null 2>&1; then
                            docker compose version
                            echo "Usando 'docker compose' ao invés de 'docker-compose'"
                        else
                            echo "❌ Docker Compose não encontrado!"
                            exit 1
                        fi
                        echo "✅ Docker verificado"
                    '''
                }
            }
        }
        
        stage('Build Application') {
            steps {
                script {
                    echo "🏗️ Construindo aplicação..."
                    
                    sh '''
                        # Dar permissões de execução
                        chmod +x build.sh maintenance.sh troubleshoot.sh
                        
                        # Verificar espaço em disco
                        echo "=== Verificando Recursos ==="
                        df -h
                        docker system df
                        echo "=========================="
                        
                        # Executar troubleshooting preventivo
                        echo "🔍 Executando verificações preventivas..."
                        ./troubleshoot.sh || echo "Troubleshooting executado (com avisos)"
                        
                        # Executar o script de build
                        echo "🚀 Iniciando build principal..."
                        ./build.sh
                    '''
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    echo "🏥 Executando verificações de saúde..."
                    
                    sleep(time: 30, unit: 'SECONDS')
                    
                    sh '''
                        echo "Verificando saúde dos serviços..."
                        
                        # Função para testar endpoint
                        test_endpoint() {
                            local url=$1
                            local name=$2
                            local max_attempts=10
                            local attempt=1
                            
                            while [ $attempt -le $max_attempts ]; do
                                echo "Tentando conectar com $name (tentativa $attempt/$max_attempts)..."
                                if curl -f "$url" >/dev/null 2>&1; then
                                    echo "✅ $name está respondendo"
                                    return 0
                                fi
                                sleep 5
                                ((attempt++))
                            done
                            
                            echo "❌ $name não está respondendo após $max_attempts tentativas"
                            return 1
                        }
                        
                        # Testar endpoints
                        test_endpoint "http://localhost:8080/health" "Backend"
                        test_endpoint "http://localhost:3000" "Frontend"  
                        test_endpoint "http://localhost:54321/health" "Supabase"
                        
                        echo "🎉 Todos os serviços estão funcionando!"
                    '''
                }
            }
        }
        
        stage('Deploy Status') {
            steps {
                script {
                    echo "🚀 Mostrando status da aplicação..."
                    
                    sh '''
                        echo "=== Status Final da Aplicação ==="
                        if command -v docker-compose >/dev/null 2>&1; then
                            docker-compose ps
                        else
                            docker compose ps
                        fi
                        echo ""
                        echo "URLs de acesso:"
                        echo "  Frontend:        http://localhost:3000"
                        echo "  Backend API:     http://localhost:8080"
                        echo "  Supabase:        http://localhost:54321"
                        echo "  Supabase Studio: http://localhost:54323"
                        echo ""
                        echo "🎉 Deploy concluído com sucesso!"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "🧹 Executando limpeza final..."
                
                sh '''
                    echo "Coletando logs dos containers..."
                    mkdir -p logs
                    if command -v docker-compose >/dev/null 2>&1; then
                        docker-compose logs > logs/docker-compose.log 2>&1 || true
                    else
                        docker compose logs > logs/docker-compose.log 2>&1 || true
                    fi
                '''
                
                archiveArtifacts artifacts: 'logs/**', allowEmptyArchive: true
            }
        }
        
        success {
            script {
                echo "✅ Pipeline executado com sucesso!"
                
                sh '''
                    echo "🎉 Build concluído com sucesso!"
                    echo "Data: $(date)"
                    echo "Repositório: ${GIT_REPO_URL}"
                    echo "Branch: ${GIT_BRANCH}"
                '''
            }
        }
        
        failure {
            script {
                echo "❌ Pipeline falhou!"
                
                sh '''
                    echo "=== Informações de Debug ==="
                    echo "Workspace content:"
                    ls -la || true
                    echo ""
                    echo "Docker containers:"
                    docker ps -a || true
                    echo ""
                    echo "Docker images:"
                    docker images || true
                    echo ""
                    echo "Docker compose status:"
                    if command -v docker-compose >/dev/null 2>&1; then
                        docker-compose ps || true
                    else
                        docker compose ps || true
                    fi
                '''
                
                sh '''
                    echo "Fazendo cleanup de emergência..."
                    if command -v docker-compose >/dev/null 2>&1; then
                        docker-compose down || true
                    else
                        docker compose down || true
                    fi
                '''
            }
        }
    }
}