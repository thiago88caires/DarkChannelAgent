services:
  supabase-db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    volumes:
      - ./supabase/data/postgres/pgdata:/var/lib/postgresql/data
      - ./supabase/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_net

  supabase-auth:
    image: supabase/gotrue:v2.132.3
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://authenticator:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}
      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 5s
      timeout: 5s
      retries: 12
    networks:
      - app_net

  supabase-rest:
    image: postgrest/postgrest:v12.0.1
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PGRST_DB_URI: postgresql://authenticator:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    networks:
      - app_net

  supabase-meta:
    image: supabase/postgres-meta:v0.86.0
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - app_net

  supabase-gateway:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      supabase-auth:
        condition: service_healthy
      supabase-rest:
        condition: service_started
      supabase-meta:
        condition: service_started
    volumes:
      - ./supabase/nginx-simple.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "54321:80"
    networks:
      - app_net

  supabase-studio:
    image: supabase/studio:latest
    restart: unless-stopped
    depends_on:
      supabase-gateway:
        condition: service_started
      supabase-meta:
        condition: service_started
    ports:
      - "54323:3000"
    env_file:
      - .env
    environment:
      STUDIO_PORT: 3000
      SUPABASE_URL: http://supabase-gateway
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      STUDIO_PG_META_URL: http://supabase-meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "node -e \"fetch('http://supabase-studio:3000/api/platform/profile').then(r => { if (r.status !== 200) throw new Error(r.status) })\""]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - app_net

  backend:
    build: ./backend
    restart: unless-stopped
    depends_on:
      supabase-gateway:
        condition: service_started
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 8080
      CORS_ORIGIN: ${SITE_URL}
      SUPABASE_URL: ${SUPABASE_INTERNAL_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      N8N_BASE_URL: ${N8N_BASE_URL}
      N8N_WEBHOOK_SCREENPLAY_URL: ${N8N_WEBHOOK_SCREENPLAY_URL}
      N8N_WEBHOOK_VIDEO_URL: ${N8N_WEBHOOK_VIDEO_URL}
      N8N_CALLBACK_SECRET: ${N8N_CALLBACK_SECRET}
      PAYMENT_PROVIDER: ${PAYMENT_PROVIDER}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      CREDITS_PRICE_CENTS: ${CREDITS_PRICE_CENTS}
      ALLOW_ANON: ${ALLOW_ANON}
      ALLOW_ANON_ADMIN: ${ALLOW_ANON_ADMIN}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - app_net

  frontend:
    build:
      context: ./frontend
      args:
        VITE_SUPABASE_URL: ${SUPABASE_PUBLIC_URL}
        VITE_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
        VITE_API_BASE_URL: http://localhost:8080
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    environment:
      VITE_SUPABASE_URL: ${SUPABASE_PUBLIC_URL}
      VITE_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      VITE_API_BASE_URL: http://localhost:8080
    ports:
      - "3000:3000"
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

